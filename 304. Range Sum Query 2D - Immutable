public class NumMatrix {

    int[,] sums;

    public NumMatrix(int[][] matrix) {
        var row = matrix.Length;
        if (row == 0) return;
        var col = matrix[0].Length;

        sums = new int[row + 1, col + 1];

        for (int i = 0; i < row; i++) {
            var sumI = i + 1;
            for (int j = 0; j < col; j++) {
                var sumJ = j + 1;

                sums[sumI, sumJ] = sums[sumI - 1, sumJ] + sums[sumI, sumJ - 1] - sums[sumI - 1, sumJ - 1] + matrix[i][j];
            }
        }
    }

    public int SumRegion(int row1, int col1, int row2, int col2) {
        if (sums == null) return 0;

        return sums[row2 + 1, col2 + 1] - (sums[row1, col2 + 1] + sums[row2 + 1, col1]) + sums[row1, col1];
    }
}


/**
 * Your NumMatrix object will be instantiated and called as such:
 * NumMatrix obj = new NumMatrix(matrix);
 * int param_1 = obj.SumRegion(row1,col1,row2,col2);
 */
 
 /*
 Input
["NumMatrix", "sumRegion", "sumRegion", "sumRegion"]
[[[[3, 0, 1, 4, 2], [5, 6, 3, 2, 1], [1, 2, 0, 1, 5], [4, 1, 0, 1, 7], [1, 0, 3, 0, 5]]], [2, 1, 4, 3], [1, 1, 2, 2], [1, 2, 2, 4]]
Output
[null, 8, 11, 12]

Explanation
NumMatrix numMatrix = new NumMatrix([[3, 0, 1, 4, 2], [5, 6, 3, 2, 1], [1, 2, 0, 1, 5], [4, 1, 0, 1, 7], [1, 0, 3, 0, 5]]);
numMatrix.sumRegion(2, 1, 4, 3); // return 8 (i.e sum of the red rectangle)
numMatrix.sumRegion(1, 1, 2, 2); // return 11 (i.e sum of the green rectangle)
numMatrix.sumRegion(1, 2, 2, 4); // return 12 (i.e sum of the blue rectangle)
*/
